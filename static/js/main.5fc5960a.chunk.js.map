{"version":3,"sources":["serviceWorker.js","components/navbar.js","components/MovieItem.js","components/MoviesGrid.js","components/main.js","app.js","index.js"],"names":["Boolean","window","location","hostname","match","SearchBox","props","useState","value","setValue","loading","setLoading","className","onSubmit","event","preventDefault","moviesData","then","moviesArr","results","type","placeholder","onChange","target","onHandle","Loading","Spinner","animation","role","variant","navBar","Navbar","bg","Brand","href","Nav","Link","handleQuery","handleMovies","query","fetch","movies","json","MovieItem","item","img","poster_path","console","log","Card","style","width","hieght","Img","src","Body","Title","title","Text","overview","Badge","vote_average","MoviesGrid","Container","Row","map","Col","lg","Main","Fragment","data","App","setMovies","setQuery","searchText","moviesResult","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5fc5960a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { Navbar, Nav, Spinner } from \"react-bootstrap\";\r\nimport React, { useState } from \"react\";\r\nconst moviesUrl =\r\n  \"https://api.themoviedb.org/3/search/movie/?api_key=1d54e327869a62aba4dc1b58c2b30233\";\r\n\r\nfunction navBar(props) {\r\n  return (\r\n    <>\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"#\">Assassins Movies</Navbar.Brand>\r\n        <Nav>\r\n          <Nav.Link href=\"#home\">Home</Nav.Link>\r\n        </Nav>\r\n        <SearchBox onHandle={props.handleQuery} onSubmit={props.handleMovies} />\r\n      </Navbar>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction SearchBox(props) {\r\n  const [value, setValue] = useState(\"\");\r\n  let [loading, setLoading] = useState(false);\r\n\r\n  const handleChange = (event) => {\r\n    setLoading(true);\r\n    setValue(event.target.value);\r\n    props.onHandle(event.target.value);\r\n    moviesData(value).then((moviesArr) => {\r\n      setLoading(false);\r\n    });\r\n  };\r\n  const handleSubmit = (event) => {\r\n    setLoading(true);\r\n    event.preventDefault();\r\n    moviesData(value).then((moviesArr) => {\r\n      setLoading(false);\r\n      props.onSubmit(moviesArr.results);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className=\"form-inline my-2\" onSubmit={handleSubmit}>\r\n        <input\r\n          className=\"form-control\"\r\n          type=\"search\"\r\n          placeholder=\"Search for a Movie\"\r\n          value={value}\r\n          onChange={handleChange}\r\n        ></input>\r\n        <button className=\" btn btn-primary ml-3\" type=\"submit\">\r\n          Search\r\n        </button>\r\n      </form>\r\n      {loading && <Loading />}\r\n    </>\r\n  );\r\n}\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <Spinner animation=\"grow\" role=\"status\" variant=\"warning\" className=\"ml-4\">\r\n      <span className=\"sr-only spin \">Loading...</span>\r\n    </Spinner>\r\n  );\r\n};\r\nexport default navBar;\r\n\r\nfunction moviesData(query) {\r\n  return fetch(`${moviesUrl}&query=${query}`).then((movies) => movies.json());\r\n}\r\n","import React from \"react\";\r\nimport { Card, Badge } from \"react-bootstrap\";\r\n\r\nfunction MovieItem(props) {\r\n  const { item } = props;\r\n  const img = `https://image.tmdb.org/t/p/w500${item.poster_path}`;\r\n  console.log(item);\r\n  return (\r\n    <div>\r\n      <Card style={{ width: \"20rem\", hieght: \"10rem\" }}>\r\n        <Card.Img variant=\"top\" src={img} />\r\n        <Card.Body>\r\n          <Card.Title>{item.title}</Card.Title>\r\n          <Card.Text>{item.overview}</Card.Text>\r\n          <Card.Text>\r\n            <Badge variant=\"success\">{item.vote_average}</Badge>\r\n          </Card.Text>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\nexport default MovieItem;\r\n","import React from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport MovieItem from \"./MovieItem\";\r\nfunction MoviesGrid(props) {\r\n  return (\r\n    <Container className=\"mt-5\">\r\n      <Row>\r\n        {props.movies.map((movies) => (\r\n          <Col lg=\"6\">\r\n            <MovieItem item={movies} />\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\nexport default MoviesGrid;\r\n","import React from \"react\";\r\nimport MoviesGrid from \"./MoviesGrid\";\r\n\r\nexport default function Main(props) {\r\n  console.log(props.moviesData);\r\n  return (\r\n    <React.Fragment>\r\n      <MoviesGrid movies={props.moviesData.map((data) => data)} />\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Navbar from \"./components/navbar\";\r\nimport Main from \"./components/main\";\r\n\r\nfunction App() {\r\n  const [movies, setMovies] = useState([]);\r\n  const [query, setQuery] = useState(\"X\");\r\n\r\n  const handleMovies = (moviesResult) => {\r\n    return setMovies(moviesResult);\r\n  };\r\n\r\n  function handleQuery(searchText) {\r\n    setQuery(searchText);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Navbar handleQuery={handleQuery} handleMovies={handleMovies} />\r\n      <Main moviesData={movies} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport App from \"./app.js\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}